#!/bin/bash

dialog --msgbox "Disclaimer: Read the script carefully before use it, i am not responsible for any damage "\
"caused by it. Everyone can use it. Works with uefi and its configured for intel graphics, for "\
"nvidia you must add packages to it. The installer uses disk encryption with luks2 by default. if you set file "\
"system type to btrfs it will use all disk space to create btrfs subvolumes. For xfs or ext4, you can choose "\
"the size of partitions. Leave the default 25G and it will create a home partition with the remaining space "\
"or leave it empty and it use all disk space to create a root partition."\
"For swap i use zramen.For backups i use timeshift or snapper with grub and grub-btrfs."\
"Root login is disable and i use doas, sudo isnt installed."\
"There is a lot of customization and some bugs..."\
"Notes: Grub with secure boot (sbctl) doesnt work (for now)"\
"Its easy to adapt to other preferences." 0 0 --output-fd 1

clear

dialog --yesno "Proceed to installation?" 0 0 --output-fd 1
start=$?
clear

if [[ $start == 1 ]]; then
	exit
fi

 keyb=$(dialog --radiolist "choose your keyboard"  0 0 4 'pt' 1 on 'br-abnt' 2 off 'uk' 3 off 'us' 4 off  --output-fd 1)

#keyb=$(dialog --title "choose your keymap" --fselect /usr/share/kbd/keymaps/ 0 0 --output-fd 1)

# root_pw=$(dialog --insecure --passwordbox "enter root password" 0 0 --output-fd 1)
# root_cpw=$(dialog --insecure --passwordbox "confirm root password" 0 0 --output-fd 1)
#
# while [ $root_pw != $root_cpw ]
# do
# 	dialog --msgbox "passwords dont match!!!" 0 0 --output-fd 1
#
# 	root_pw=$(dialog --insecure --passwordbox "enter root password" 0 0 --output-fd 1)
# 	root_cpw=$(dialog --insecure --passwordbox "confirm root password" 0 0 --output-fd 1)
# done

username=$(dialog --inputbox "enter username" 0 0 --output-fd 1)

user_pw=$(dialog --insecure --passwordbox "enter user password" 0 0 --output-fd 1)
user_cpw=$(dialog --insecure --passwordbox "confirm user password" 0 0 --output-fd 1)

while [ $user_pw != $user_cpw ]
do
	dialog --msgbox "passwords dont match!!!" 0 0 --output-fd 1

	user_pw=$(dialog --insecure --passwordbox "enter user password" 0 0 --output-fd 1)
	user_cpw=$(dialog --insecure --passwordbox "confirm user password" 0 0 --output-fd 1)
done

luks_pw=$(dialog --insecure --passwordbox "enter luks password" 0 0 --output-fd 1)

user_groups=$(dialog --checklist "choose groups" 0 0 5 'wheel' 1 on 'audio' 2 on 'video' 3 on 'kvm' 4 off 'xbuilder' 5 off --output-fd 1)
#user_groups="wheel,audio,video,kvm,xbuilder"

fs_type=$(dialog --radiolist "choose your file system" 0 0 3 'xfs' 1 on 'ext4' 2 off 'btrfs' 3 off --output-fd 1)

efi_part_size=$(dialog --inputbox "enter efi partition size (default: 512M)" 0 0 512M --output-fd 1)

if [[ $fs_type == "btrfs" ]]; then
	root_part_size=""
else
	root_part_size=$(dialog --inputbox "enter root partition size (default: 25G)" 0 0 25G --output-fd 1)
fi

hostname=$(dialog --inputbox "enter your hostname" 0 0 xpt099 --output-fd 1)


glib=$(dialog --radiolist "choose btw glibc or musl" 0 0 2 'glibc' 1 on 'musl' 2 off --output-fd 1 )

if [[ $glib == "glibc" ]]; then
	glib=""
fi

language=$(dialog --radiolist "choose your language" 0 0 4 'pt_PT.UTF-8' 1 on 'en_US.UTF-8' 2 off \
'en_UK.UTF-8' 3 off 'en_IE.UTF-8' 4 off --output-fd 1)

local=$(dialog --title "choose your location" --fselect /usr/share/zoneinfo/ 0 0 --output-fd 1)

bm=$(dialog --radiolist "choose your boot manager" 0 0 3 'grub' 1 on 'efistub' 2 off 'refind' 3 off --output-fd 1)

graphical=$(dialog --radiolist "choose your graphical interface" 0 0 3 'kde' 1 on 'gnome' 2 off 'xfce' 3 off 'minimal' 4 off --output-fd 1)

disk=$(dialog --radiolist "enter disk for installation" 0 0 3 '/dev/sda' 1 on '/dev/vda' 2 off '/dev/nvme0n1' 3 off --output-fd 1)


dialog --yesno "enable secure boot?" 0 0 --output-fd 1

secure_boot=$?

clear

ARCH="x86_64"

if [[ $glib == "musl" ]]; then

	ARCH="x86_64-musl"

fi

void_repo="https://repo-de.voidlinux.org/current/"$glib
#after install change mirror with xmirror

#dns_list=("9.9.9.9" "1.1.1.1")

crm="chroot /mnt"


apps="nano neovim elogind dbus socklog-void apparmor runit-void-apparmor chrony xmirror fastfetch pipewire wireplumber"\
" nftables runit-nftables vsv htop btop bat opendoas topgrade octoxbps flatpak zramen"\
" ffmpeg bash-completion lm_sensors"

apps_optional="lynis hplip hplip-gui starship"

apps_intel="mesa-dri intel-ucode intel-gpu-tools intel-video-accel"

if [[ $disk == "/dev/vda" ]]; then #virtual machine

	apps_intel="xf86-video-qxl"
	apps_optional=""
	apps="nano dbus startship socklog-void fastfetch pipewire wireplumber vsv htop bat opendoas"
fi

apps_kde="kde-plasma kde-baseapps discover ffmpegthumbs NetworkManager discover spectacle flatpack-kcm gparted"

apps_gnome="gnome-core gnome-console gnome-tweaks gnome-browser-connector gnome-text-editor NetworkManager"

apps_xfce="xfce4 paper-gtk-theme paper-icon-theme xorg-minimal lightdm xfce4-pulseaudio-plugin "\
"xfce4-whiskermenu-plugin NetworkManager labwc"

fonts="font-adobe-source-code-pro terminus-font dejavu-fonts-ttf font-firacode"
#for test
apps_minimal="nano vsv opendoas iwd terminus-font bat"

rm_services=("agetty-tty3" "agetty-tty4" "agetty-tty5" "agetty-tty6")

en_services=("acpid" "dbus" "chronyd" "udevd" "uuidd" "cupsd" "socklog-unix" "nanoklogd" "NetworkManager" "iwd" "sddm" "gdm" "lightdm" "zramen" "grub-btrfs" "dhcpcd-eth0" "snapperd")


if [[ $disk == *"sd"* ]]; then
	efi_part=$(echo $disk'1')
	luks_part=$(echo $disk'2')
elif [[ $disk == *"vd"* ]]; then
	efi_part=$(echo $disk'1')
	luks_part=$(echo $disk'2')
elif [[ $disk == *"nvme"* ]]; then
	efi_part=$(echo $disk'p1')
	luks_part=$(echo $disk'p2')
fi


dialog --yesno "we are about to format the disk, do you want to proceed?" 0 0 --output-fd 1
begin=$?
clear

if [[ $begin == 0 ]]; then

	#dd if=/dev/urandom of=$disk bs=16M status=progress

#Wipe disk
	wipefs -aq $disk
else exit
fi
#dd if=/dev/zero of=/dev$disk bs=16M count=500

printf 'label: gpt\n, %s, U, *\n, , L\n' "$efi_part_size" | sfdisk -q "$disk"

#Create LUKS2 encrypted partition
#cryptsetup benchmark   to find the best cypher for your pc

if [[ $bm == "grub" ]]; then
	echo $luks_pw | cryptsetup -q luksFormat $luks_part --pbkdf pbkdf2
	echo $luks_pw | cryptsetup open $luks_part cryptroot
else
	echo $luks_pw | cryptsetup -q luksFormat $luks_part
	echo $luks_pw | cryptsetup open $luks_part cryptroot
fi

if [[ $fs_type != "btrfs"  ]]; then
	vgcreate $hostname /dev/mapper/cryptroot
else
	mkfs.btrfs -L $hostname /dev/mapper/cryptroot
fi

if [[ $fs_type != "btrfs" && $root_part_size == "" ]]; then

	lvcreate --name root -l 100%FREE $hostname

elif [[ $fs_type != "btrfs" && $root_part_size != "" ]]; then

	lvcreate --name root -L $root_part_size $hostname
	lvcreate --name home -l 100%FREE $hostname
fi



if [[ $fs_type != "btrfs"  ]]; then
	mkfs.$fs_type -qL root /dev/$hostname/root
fi

if [[ $fs_type != "btrfs" && $root_part_size != "" ]]; then
	mkfs.$fs_type -qL home /dev/$hostname/home
fi

if [[ $fs_type == "btrfs" && $root_part_size == "" ]]; then

	BTRFS_OPTS="noatime,compress,space_cache=v2,discard=async,ssd"
	mount -o $BTRFS_OPTS /dev/mapper/cryptroot /mnt
	btrfs subvolume create /mnt/@
	btrfs subvolume create /mnt/@home
	btrfs subvolume create /mnt/@snapshots
    btrfs subvolume create /mnt/@log
    btrfs subvolume create /mnt/@cache
    umount /mnt
fi

if [[ $fs_type != "btrfs"  ]]; then
	mount /dev/$hostname/root /mnt
else
	mount -o $BTRFS_OPTS,subvol=@ /dev/mapper/cryptroot /mnt
	mkdir -p /mnt/{home,.snapshots,var/log,var/cache}
	mount -o $BTRFS_OPTS,subvol=@home /dev/mapper/cryptroot /mnt/home
	mount -o $BTRFS_OPTS,subvol=@snapshots /dev/mapper/cryptroot /mnt/.snapshots
	mount -o $BTRFS_OPTS,subvol=@log /dev/mapper/cryptroot /mnt/var/log
	mount -o $BTRFS_OPTS,subvol=@cache /dev/mapper/cryptroot /mnt/var/cache
fi

for dir in dev proc sys run; do

	mkdir -p /mnt/$dir
	mount --rbind /$dir /mnt/$dir
	mount --make-rslave /mnt/$dir
done

if [[ $fs_type != "btrfs" && $root_part_size != "" ]]; then
   	mkdir -p /mnt/home
	mount /dev/$hostname/home /mnt/home
fi


if [[ $bm != "grub"  ]]; then
	mkfs.vfat $efi_part
	mkdir -p /mnt/efi
	mount $efi_part /mnt/efi
else
	mkfs.vfat $efi_part
	mkdir -p /mnt/boot/efi
	mount $efi_part /mnt/boot/efi
fi


mkdir -p /mnt/var/db/xbps/keys
cp /var/db/xbps/keys/* /mnt/var/db/xbps/keys/

if [[ $bm != "grub"  ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt base-system binutils zstd cryptsetup lvm2 efibootmgr \
	sbsigntool systemd-boot-efistub sbctl refind dracut-uefi timeshift
	chroot /mnt xbps-alternatives -s dracut-uefi
else
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt base-system binutils zstd cryptsetup lvm2 efibootmgr \
	sbctl grub-btrfs grub-btrfs-runit btrfs-progs grub-x86_64-efi snapper
fi

#inicio de chroot

$crm chown root:root /
$crm chmod 755 /

useradd -R /mnt -mUG $user_groups $username -s /bin/bash


cat << EOF | $crm
echo "$root_pw\n$root_pw" | passwd -q root
echo "$user_pw\n$user_pw" | passwd -q $username
EOF

#cat << EOF | $crm
#echo "$user_pw\n$user_pw" | passwd -q $username
#EOF

#disable root login
sed -i 's/^root:x:0:0:root:/root:/bin/sh$/root:x:0:0:root:/root:/sbin/nologin/i' /mnt/etc/passwd

#Set hostname and language/locale
echo $hostname > /mnt/etc/hostname


if [[ $glib == "" ]]; then
    echo "LANG=$language" > /mnt/etc/locale.conf
    echo -e "$language UTF-8" >> /mnt/etc/default/libc-locales
    xbps-reconfigure -fr /mnt/ glibc-locales
fi

$crm ln -sf /usr/share/zoneinfo/Europe/Lisbon /etc/localtime


luks_root_uuid=$(blkid -o value -s UUID  /mnt/dev/mapper/$hostname-root)
luks_home_uuid=$(blkid -o value -s UUID  /mnt/dev/mapper/$hostname-home)
boot_uuid=$(blkid -o value -s UUID  /mnt$disk'1')
luks_uuid=$(blkid -o value -s UUID  /mnt$disk'2')
ROOT_UUID=$(blkid -s UUID -o value /dev/mapper/cryptroot)

if [[ $fs_type != "btrfs"  ]]; then
	echo -e "UUID=$luks_root_uuid	/	$fs_type	defaults,noatime	0	1" >> /mnt/etc/fstab
fi

if [[ $root_part_size != "" || $fs_type != "btrfs" ]]; then
	echo -e "UUID=$luks_home_uuid	/home	$fs_type	defaults,noatime	0	2" >> /mnt/etc/fstab

else
	echo -e "UUID=$ROOT_UUID / btrfs $BTRFS_OPTS,subvol=@ 0 1
	UUID=$ROOT_UUID /home btrfs $BTRFS_OPTS,subvol=@home 0 2
	UUID=$ROOT_UUID /.snapshots btrfs $BTRFS_OPTS,subvol=@snapshots 0 2
	UUID=$ROOT_UUID /var/log btrfs $BTRFS_OPTS,subvol=@log 0 2
	UUID=$ROOT_UUID /var/cache btrfs $BTRFS_OPTS,subvol=@cache 0 2" >> /mnt/etc/fstab
fi

echo "efivarfs /sys/firmware/efi/efivars efivarfs defaults 0 0" >> /mnt/etc/fstab

if [[ $bm != "grub"  ]]; then
	echo "UUID=$boot_uuid	/efi	vfat	umask=0077	0	2" >> /mnt/etc/fstab
else
	echo "UUID=$boot_uuid	/boot/efi	vfat	umask=0077	0	2" >> /mnt/etc/fstab
fi

	#dracut
echo "hostonly=yes" > /mnt/etc/dracut.conf.d/10-boot.conf

if [[ $bm != "grub"  ]]; then
	echo -e 'uefi="yes"
	uefi_stub=/lib/systemd/boot/efi/linuxx64.efi.stub'  >> /mnt/etc/dracut.conf.d/10-boot.conf
fi

if [[ $bm != "grub" && $fs_type != "btrfs"  ]]; then
	echo 'kernel_cmdline="rd.luks.name='$luks_root_uuid'=cryptroot rd.lvm.vg='$hostname' root=/dev/'$hostname'/root rd.luks.allow-discards apparmor=1 security=apparmorquiet"' >> /mnt/etc/dracut.conf.d/10-boot.conf
elif [[ $bm != "grub" && $fs_type == "btrfs"  ]]; then
	echo 'kernel_cmdline="root=UUID='$ROOT_UUID' apparmor=1 security=apparmor quiet"' >> /mnt/etc/dracut.conf.d/10-boot.conf
fi

#set main repo

echo "repository=$void_repo" > /mnt/usr/share/xbps.d/00-repository-main.conf

# harden sysctl

mkdir /mnt/etc/sysctl.d

echo -e "dev.tty.ldisc_autoload=0
fs.protected_symlinks=1
fs.protected_hardlinks=1
fs.protected_fifos=2
fs.protected_regular=2
fs.suid_dumpable=0
kernel.core_pattern=|/bin/false
kernel.dmesg_restrict=1
kernel.kexec_load_disabled=1
kernel.yama.ptrace_scope=2
kernel.kptr_restrict=2
kernel.printk=3 3 3 3
kernel.unprivileged_bpf_disabled=1
kernel.sysrq=4
kernel.unprivileged_userns_clone=0
kernel.perf_event_paranoid=3
kernel.randomize_va_space=2
kernel.msgmnb=65535
kernel.msgmax=65535
net.core.bpf_jit_harden=2
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_rfc1337=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.icmp_echo_ignore_all=1
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16
vm.unprivileged_userfaultfd=0" > /mnt/etc/sysctl.d/99-void-user.conf

#secure boot
if [[ $secure_boot == 0 ]]; then

	$crm sbctl create-keys
	$crm sbctl enroll-keys -i
elif [[ $secure_boot == 0 && $bm != "grub" ]]; then
	echo 'uefi_secureboot_cert="/var/lib/sbctl/keys/db/db.pem"' >> /mnt/etc/dracut.conf.d/10-boot.conf
	echo 'uefi_secureboot_key="/var/lib/sbctl/keys/db/db.key"' >> /mnt/etc/dracut.conf.d/10-boot.conf
fi

if [[ $bm != "grub"  ]]; then
	echo -e 'CREATE_UEFI_BUNDLES=yes
	UEFI_BUNDLE_DIR="efi/EFI/Linux/"' >> /mnt/etc/default/dracut-uefi-hook
	mkdir -p /mnt/efi/EFI/Linux
fi

XBPS_ARCH=$ARCH xbps-install -SuyR $void_repo -r /mnt xbps
XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt void-repo-nonfree

if [[ $graphical == "kde" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt $apps $apps_kde $apps_intel $apps_optional $fonts

elif [[ $graphical == "gnome" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt $apps $apps_gnome $apps_intel $apps_optional $fonts

elif [[ $graphical == "xfce" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt $apps $apps_xfce $apps_intel $apps_optional $fonts

elif [[ $graphical == "minimal" ]]; then
	XBPS_ARCH=$ARCH  xbps-install -SyR $void_repo -r /mnt $apps_minimal $fonts

	#iwd
	mkdir -p /mnt/etc/iwd

	echo -e "[General]
	EnableNetworkConfiguration=true
	[Network]
	RoutePriorityOffset=200
	NameResolvingService=none
	EnableIPv6=false" > /mnt/etc/iwd/main.conf

fi

#firewall nftables example for a workstation

echo -e 'flush ruleset

table inet filter {
	chain input {
		type filter hook input priority 0; policy drop;
		ct state invalid counter drop comment "early drop of invalid packets"
		ct state {established, related} counter accept comment "accept all connections related to connections made by us"
		iif lo accept comment "accept loopback"
		iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not coming from loopback"
		iif != lo ip6 daddr ::1/128 counter drop comment "drop connections to loopback not coming from loopback"
		ip protocol icmp counter accept comment "accept all ICMP types"
		meta l4proto ipv6-icmp counter accept comment "accept all ICMP types"
		udp dport mdns ip daddr 224.0.0.251 counter accept comment "IPv4 mDNS"
		udp dport mdns ip6 daddr ff02::fb counter accept comment "IPv6 mDNS"
		#tcp dport 22 counter accept comment "accept SSH"
		counter comment "count dropped packets"
	}
	chain forward {
		type filter hook forward priority 0; policy drop;
		counter comment "count dropped packets"
	}
	# If were not counting packets, this chain can be omitted.
	chain output {
		type filter hook output priority 0; policy accept;
		counter comment "count accepted packets"
	}
}' > /mnt/etc/nftables.conf


if [[ $graphical != "minimal" ]]; then

	#pipewire
	$crm mkdir -p /etc/pipewire/pipewire.conf.d
	$crm ln -s /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/
	$crm ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/

	#start pipewire.desktop for kde gnome etc
	$crm ln -s /usr/share/applications/pipewire.desktop /etc/xdg/autostart/pipewire.desktop

	#octoxbps-notifier
	$crm ln -s /usr/share/applications/octoxbps-notifier.desktop /etc/xdg/autostart/octoxbps-notifier.desktop
fi

for serv1 in ${rm_services[@]}; do

	$crm unlink /var/service/$serv1
done

for serv2 in ${en_services[@]}; do

	$crm ln -s /etc/sv/$serv2 /var/service

done

if [[ $bm != "grub"  ]]; then
	echo -e "#!/bin/sh
	mv /efi/EFI/Linux/linux-* /efi/EFI/Linux/linuxOLD.efi" \
	> /mnt/etc/kernel.d/post-install/10-uefi-boot
	chmod +x /mnt/etc/kernel.d/post-install/10-uefi-boot

	echo -e "#!/bin/sh
	cp /efi/EFI/Linux/linux-* /efi/EFI/Linux/linux.efi" \
	> /mnt/etc/kernel.d/post-install/99-uefi-boot
	chmod +x /mnt/etc/kernel.d/post-install/99-uefi-boot
fi

#rc.conf
echo -e 'KEYMAP="'$keyb'"
FONT="ter-v22n"' >> /mnt/etc/rc.conf

#apparmor
sed -i 's/^#*APPARMOR=.*$/APPARMOR=enforce/i' /mnt/etc/default/apparmor
sed -i 's/^#*write-cache/write-cache/i' /mnt/etc/apparmor/parser.conf

echo -e 'source /home/'$username'/.bash_aliases
fastfetch
complete -cf xi xs"
eval "$(starship init bash)"' >> /mnt/home/$username/.bashrc


mkdir -p /mnt/home/$username/.config
$crm chown -R $username:$username /home/$username/.config

echo -e "add_newline = true
[character] # The name of the module we are configuring is 'character'
success_symbol = '[➜](bold green)' # The 'success_symbol' segment is being set to '➜' with the color 'bold green'
[package]
disabled = true" > /mnt/home/$username/.config/starship.toml

echo -e "alias xi='doas xbps-install -S'
alias xu='doas xbps-install -Su'
alias xs='xbps-query -Rs'
alias xr='doas xbps-remove -oOR'
alias xq='xbps-query'
alias xsi='xbps-query -m'
alias sudo='doas'
alias dmesg='doas dmesg | less'
alias logs='doas svlogtail | less'
alias e='nano'
alias de='doas nano'
alias vsv='doas vsv'
alias reboot='doas reboot'
alias poweroff='doas poweroff'
alias ss='ss -atup'
alias cat='bat'
alias gitssh='ssh -T git@github.com'
alias ll='ls -all'
#snapper
alias xis='doas xbps-install -S && doas snapper create -t timeline -d after-install'
alias xrs='doas snapper create -t timeline -d before-remove && doas xbps-remove -oOR'
alias xus='doas snapper create --command 'doas xbps-install -Su' -d update'
alias sensors='watch sensors'" > /mnt/home/$username/.bash_aliases

$crm chown $username:$username /home/$username/.bash_aliases

#fonts
$crm ln -s /usr/share/fontconfig/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d/
#xbps-reconfigure -fr fontconfig /mnt/

#doas
echo "permit persist setenv {PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin} :$username" > /mnt/etc/doas.conf
$crm chown -c root:root /etc/doas.conf
$crm chmod -c 0400 /etc/doas.conf

#ssh / cron hardening permissions

echo -e "PasswordAuthentication no
PermitRootLogin no" >> /mnt/etc/ssh/sshd_config

$crm chown -c root:root /etc/ssh/sshd_config
$crm chmod -c 0400 /etc/ssh/sshd_config
$crm chown -c root:root /etc/cron.daily
$crm chmod -c 0400 /etc/cron.daily

#blacklist modules and drivers not needed
echo -e "blacklist dccp
install dccp /bin/false
blacklist sctp
install sctp /bin/false
blacklist rds
install rds /bin/false
blacklist tipc
install tipc /bin/false
blacklist firewire-core
install firewire-core /bin/false
blacklist thunderbolt
install thunderbolt /bin/false" > /mnt/etc/modprobe.d/blacklist.conf

#time zone
$crm ln -sf $local /etc/localtime

#ignore packages
$crm touch /etc/xbps.d/99-ignorepkgs.conf

ignore_pkgs=("sudo" "linux-firmware-amd" "linux-firmware-nvidia" "linux-firmware-broadcom" "ipw2100-firmware" "ipw2200-firmware")

for pkg in ${ignore_pkgs[@]}; do
   echo "ignorepkg="$pkg >> /mnt/etc/xbps.d/99-ignorepkgs.conf
   $crm xbps-remove -oOR $pkg -y
done

# enable flatpak

$crm flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

#dns
#for dns in ${dns_list[@]}; do

  #echo "nameserver="$dns >> /mnt/etc/resolv.conf
  
if [[ $bm != "grub"  ]]; then
	efibootmgr -c -d $disk -p 1 -L "Void Linux OLD" -l "\EFI\Linux\linuxOLD.efi"
	efibootmgr -c -d $disk -p 1 -L "Void Linux" -l "\EFI\Linux\linux.efi"
fi

if [[ $bm == "refind" ]]; then
	$crm refind-install
fi

if [[ $bm == "refind" && $secure_boot == 0 ]]; then
	$crm sbctl sign -s /efi/EFI/refind/refind_x64.efi
fi

if [[ $bm == "grub" && $fs_type != "btrfs" ]]; then
	echo 'GRUB_CMDLINE_LINUX="rd.luks.uuid='$luks_uuid' rd.lvm.vg='$hostname' apparmor=1 security=apparmor"' >> /mnt/etc/default/grub
fi

if [[ $bm == "grub" && $fs_type == "btrfs" ]]; then
	echo 'GRUB_CMDLINE_LINUX="root=UUID='$ROOT_UUID' apparmor=1 security=apparmor"' >> /mnt/etc/default/grub
	#echo "--timeshift-auto" > /mnt/etc/sv/grub-btrfs/conf
	echo 'GRUB_BTRFS_ENABLE_CRYPTODISK="true"' >> /mnt/etc/default/grub-btrfs/config
	echo "GRUB_ENABLE_CRYPTODISK=y" >> /mnt/etc/default/grub
	dd bs=1 count=64 if=/dev/urandom of=/mnt/boot/volume.key
	echo $luks_pw | cryptsetup luksAddKey $disk'2' /mnt/boot/volume.key
	$crm chmod 000 /boot/volume.key
	$crm chmod -R g-rwx,o-rwx /boot
	echo "cryptroot UUID=$luks_uuid /boot/volume.key luks" >> /mnt/etc/crypttab
	echo 'install_items+=" /boot/volume.key /etc/crypttab "' >> /mnt/etc/dracut.conf.d/10-boot.conf
	$crm grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="Void" --disable-shim-lock --modules="tpm"
	$crm grub-mkconfig -o /boot/grub/grub.cfg
fi

if [[ $bm == "grub" && $secure_boot == 0 ]]; then
	$crm sbctl sign -s /efi/EFI/Void/grubx64.efi
	#vmlinuz=$($crm uname -r)
	# sbctl sign -s vmlinux-$vmlinuz
fi

#config snapper
if [[ $bm == "grub" ]]; then
	umount /mnt/.snapshots
	rm -r /mnt/.snapshots
	$crm snapper -c root create-config /
	$crm snapper -c root set-config 'TIMELINE_CREATE=no'
	$crm snapper -c root set-config 'ALLOW_GROUPS='$username''
	$crm snapper -c root set-config 'SYNC_ACL=yes'
	$crm btrfs su del /.snapshots/
	$crm mkdir /.snapshots
	$crm mount -av
fi

xbps-reconfigure -far /mnt/

echo -e "\nUnmount Void installation and reboot?(y/n)\n"
read resp
if [[ $resp == "y" ]]; then
	umount -R /mnt
 	reboot 
  shutdown -r now
fi

echo -e "\nFinish\n"
