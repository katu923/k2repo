#!/bin/bash


starting()
{
dialog --msgbox "Disclaimer: READ THE SCRIPT CAREFULLY BEFORE USE IT.\n\n
ITS CURRENTLY IN DEVELOPMENT AND NOT FULLY TESTED.\n\n
USE IT AT YOUR OWN RESPONSABILITY.\n\n
Guidelines: \n
The disk will be erased. If needed, first make a backup in a external disk!\n
For BTRFS it will use all disk space to create btrfs subvolumes. \n
For XFS or EXT4, you can choose the size of partitions. Leave at the default (25G) and it will \n
create a home partition with the remaining disk space, or leave the field EMPTY, and it will \n
use all disk space to create a root partition.\n
For swap, if needed, use zramen.\n
For superuser, i use doas, sudo isnt installed. There is an option to disable root login.\n
Firewal nftables and apparmor are installed by default.\n
To enable secure boot with sbctl, you must set secure boot in uefi bios to setup mode (and reset keys). \n
There is a lot of customization and some bugs...\n
Its easy to adapt to other preferences!! " 0 0 --output-fd 1

clear

dialog --yesno "Proceed to installation?" 0 0 --output-fd 1
start=$?
clear

if [[ $start == 1 ]]; then
	exit
fi


#uefi check
uefi=$(ls /sys/firmware/efi/efivars/)

if [[ ! -z $uefi ]]; then
	uefi="true"
	dialog --msgbox "UEFI FILE SYSTEM FOUND!!" 0 0 --output-fd 1
else
	dialog --msgbox "UEFI NOT FOUND! OLD COMPUTER..." 0 0 --output-fd 1
fi


keyb=$(dialog --radiolist "choose your keyboard"  0 0 9 'pt' 1 on 'br-abnt' 2 off 'uk' 3 off 'us' 4 off  "ca" 5 off "it" 6 off "es" 7 off "de" 8 off "fr" 9 off --output-fd 1)

#keyb=$(dialog --title "choose your keymap" --fselect /usr/share/kbd/keymaps/ 0 0 --output-fd 1)

 dialog --yesno "Config root user? (yes) or use only doas? (no)" 0 0 --output-fd 1
 adm=$?

 if [[ $adm == 0 ]]; then

while [ $root_pw != $root_cpw ] ||  [ -z $root_pw ] ||  [ -z $root_cpw ]; do
	root_pw=$(dialog --insecure --passwordbox "enter root password" 0 0 --output-fd 1)
	root_cpw=$(dialog --insecure --passwordbox "confirm root password" 0 0 --output-fd 1)
done
 fi

while [ -z $username ]; do
	username=$(dialog --inputbox "enter username" 0 0 --output-fd 1)
done

while [ $user_pw != $user_cpw ] ||  [ -z $user_pw ] ||  [ -z $user_cpw ]; do
	user_pw=$(dialog --insecure --passwordbox "enter user password" 0 0 --output-fd 1)
	user_cpw=$(dialog --insecure --passwordbox "confirm user password" 0 0 --output-fd 1)
done

user_groups=$(dialog --checklist "choose groups" 0 0 5 'wheel' 1 off 'audio' 2 on 'video' 3 on 'kvm' 4 off 'xbuilder' 5 off --output-fd 1)
user_groups="${user_groups// /,}"

diskname=$(lsblk -l -o NAME,TYPE | grep "disk" | tr -d ' \n')
diskname="${diskname//'disk'/ }"
disksize=$(lsblk $disk -l -o SIZE,TYPE | grep "disk")
disksize="${disksize// disk/}"

disk=$(dialog --backtitle "Disks detected are: $diskname" --radiolist "enter disk for installation" 0 0 3 '/dev/sda' 1 on '/dev/vda' 2 off '/dev/nvme0n1' 3 off --output-fd 1)

fs_type=$(dialog --radiolist "choose your file system" 0 0 3 'xfs' 1 on 'ext4' 2 off 'btrfs' 3 off --no-tags --output-fd 1)

while [ -z $boot_part_size ]; do
boot_part_size=$(dialog --backtitle "Total disk size is: $disksize" --inputbox "enter boot partition size (default: 512M)" 0 0 512M --output-fd 1)
done

if [[ $fs_type == "btrfs" ]]; then
	root_part_size=""
else
	root_part_size=$(dialog --backtitle "Total disk size is: $disksize" --inputbox "enter root partition size (default: 25G)" 0 0 25G --output-fd 1)
fi

hostname=$(dialog --inputbox "enter your hostname" 0 0 xpt099 --output-fd 1)

	glib=$(dialog --radiolist "choose btw glibc or musl" 0 0 2 'glibc' 1 on 'musl' 2 off --output-fd 1 )

if [[ $glib == "glibc" ]]; then
	glib=""
fi

while [ $local == "/usr/share/zoneinfo/" ] || [ -z $lslocal ]; do

    local=$(dialog --backtitle "Use tab, arrow keys and space bar to select and expand folders. example /usr/share/zoneinfo/Europe/Lisbon" --title "Choose your timezone" --fselect /usr/share/zoneinfo/ 0 0 --output-fd 1)
	lslocal=$(ls $local)
done
language=$(dialog --radiolist "choose your language" 0 0 4 'en_US.UTF-8' 1 off 'en_CA.UTF-8' 2 off 'en_IE.UTF-8' 3 off 'en_GB.UTF-8' 4 off \
'pt_PT.UTF-8' 5 on 'pt_BR.UTF-8' 6 off --output-fd 1)


if [[ $uefi == "true" ]]; then
bm=$(dialog --radiolist "choose your boot manager" 0 0 3 'grub' 1 on 'efistub' 2 off 'refind' 3 off --output-fd 1)
else
bm="grub"
fi

graphical=$(dialog --radiolist "choose your graphical interface" 0 0 4 'kde' 1 on 'gnome' 2 off 'xfce' 3 off 'minimal' 4 off --output-fd 1)


if [[ $uefi == "true" ]]; then
	dialog --yesno "enable secure boot?" 0 0 --output-fd 1
	secure_boot=$?

else
	secure_boot=1

fi
clear

ARCH="x86_64"

if [[ $glib == "musl" ]]; then

	ARCH="x86_64-musl"

fi

void_repo="https://repo-de.voidlinux.org/current/"$glib
#after install change mirror with xmirror

#dns_list=("9.9.9.9" "1.1.1.1")

crm="chroot /mnt"

apps="nano elogind dbus socklog-void chrony xmirror \
ufetch starship pipewire wireplumber vsv htop btop bat \
octoxbps flatpak zramen ffmpeg bash-completion lm_sensors"

apps_optional="lynis hplip hplip-gui gparted bogofilter"

apps_intel="mesa-dri intel-ucode intel-gpu-tools intel-video-accel"

if [[ $disk == "/dev/vda" ]]; then #virtual machine

	apps_intel="mesa-dri"
	apps_optional=""
	apps="nano starship socklog-void ufetch pipewire wireplumber vsv htop bat"
fi

apps_kde="kde-plasma kde-baseapps ffmpegthumbs NetworkManager discover spectacle flatpak-kcm kmail kwalletmanager"

apps_gnome="gnome-core gnome-console gnome-tweaks gnome-browser-connector gnome-text-editor NetworkManager"

apps_xfce="xfce4 paper-gtk-theme paper-icon-theme lightdm xfce4-pulseaudio-plugin \
xfce4-whiskermenu-plugin NetworkManager labwc xorg-minimal"

fonts="font-adobe-source-code-pro terminus-font dejavu-fonts-ttf font-firacode"
#for test
apps_minimal="nano starship socklog-void vsv opendoas iwd terminus-font bat"

rm_services=("agetty-tty4" "agetty-tty5" "agetty-tty6")

en_services=("acpid" "dbus" "chronyd" "udevd" "uuidd" "cupsd" "socklog-unix" "nanoklogd" "NetworkManager" \
"iwd" "sddm" "gdm" "lightdm" "zramen" "grub-btrfs" "dhcpcd-eth0" "snapperd")
}

prepdisk()
{

if [[ $disk == *"sd"* ]]; then
	boot_part=$(echo $disk'1')
	luks_part=$(echo $disk'2')
elif [[ $disk == *"vd"* ]]; then
	boot_part=$(echo $disk'1')
	luks_part=$(echo $disk'2')
elif [[ $disk == *"nvme"* ]]; then
	boot_part=$(echo $disk'p1')
	luks_part=$(echo $disk'p2')
fi

dialog --yesno "enable disk encryption?" 0 0 --output-fd 1
enc_start=$?
clear

if [[ $enc_start == 0 ]]; then

	encryption="yes"
	diskmap="/dev/mapper/crypt_"${luks_part/'/dev/'}""
else
	encryption="no"
    diskmap=$luks_part
fi

while [ -z $luks_pw ] && [ $encryption == "yes" ]; do
	luks_pw=$(dialog --insecure --passwordbox "enter luks password" 0 0 --output-fd 1)
done


dialog --yesno "you are about to erase and format the disk, do you want to proceed?" 0 0 --output-fd 1
begin=$?
clear

dialog --yesno "write urandom data to disk?" 0 0 --output-fd 1
urd=$?
clear
if [[ $begin == 0 && $urd == 0 && $disk != "/dev/vda" ]]; then
	dd if=/dev/urandom of=$disk bs=64M
fi

if [[ $begin == 0 ]]; then

	#Wipe disk
	wipefs -aqf $disk
else exit
fi

printf 'label: gpt\n, %s, U, *\n, , L\n' "$boot_part_size" | sfdisk -qf "$disk"

#Create LUKS2 encrypted partition
#cryptsetup benchmark   to find the best cypher for your pc


if [[ $bm == "grub"  &&  $encryption == "yes" ]]; then
	echo $luks_pw | cryptsetup -q luksFormat $luks_part --pbkdf pbkdf2
	echo $luks_pw | cryptsetup open $luks_part crypt_"${luks_part/'/dev/'}"
elif [[ $bm != "grub"  &&  $encryption == "yes" ]]; then
	echo $luks_pw | cryptsetup -q luksFormat $luks_part
	echo $luks_pw | cryptsetup open $luks_part crypt_"${luks_part/'/dev/'}"
fi


if [[ $fs_type != "btrfs" ]]; then
	vgcreate $hostname $diskmap

else
	mkfs.btrfs -L $hostname $diskmap
fi

if [[ $fs_type != "btrfs" &&  -z $root_part_size ]]; then

	lvcreate --name root -l 100%FREE $hostname

elif [[ $fs_type != "btrfs" && ! -z $root_part_size ]]; then

	lvcreate --name root -L $root_part_size $hostname
	lvcreate --name home -l 100%FREE $hostname
fi

if [[ $fs_type != "btrfs"  ]]; then
	mkfs.$fs_type -qL root /dev/$hostname/root
fi

if [[ $fs_type != "btrfs" && ! -z $root_part_size ]]; then
	mkfs.$fs_type -qL home /dev/$hostname/home
fi

if [[ $fs_type == "btrfs" && -z $root_part_size ]]; then

	BTRFS_OPTS="noatime,compress,space_cache=v2,discard=async,ssd"
	mount -o $BTRFS_OPTS $diskmap /mnt
	btrfs subvolume create /mnt/@
	btrfs subvolume create /mnt/@home
	btrfs subvolume create /mnt/@log
    btrfs subvolume create /mnt/@cache
    btrfs subvolume create /mnt/@snapshots
    umount /mnt
fi

if [[ $fs_type != "btrfs"  ]]; then
	mount /dev/$hostname/root /mnt
else
	mount -o $BTRFS_OPTS,subvol=@ $diskmap /mnt
	mkdir -p /mnt/{home,.snapshots,var/log,var/cache}
	mount -o $BTRFS_OPTS,subvol=@home $diskmap /mnt/home
	mount -o $BTRFS_OPTS,subvol=@log $diskmap /mnt/var/log
	mount -o $BTRFS_OPTS,subvol=@cache $diskmap /mnt/var/cache
	mount -o $BTRFS_OPTS,subvol=@snapshots $diskmap /mnt/.snapshots
fi

for dir in dev proc sys run; do
	mkdir -p /mnt/$dir
	mount --rbind /$dir /mnt/$dir
	mount --make-rslave /mnt/$dir
done

if [[ $fs_type != "btrfs" && ! -z $root_part_size  ]]; then
   	mkdir -p /mnt/home
	mount /dev/$hostname/home /mnt/home
fi


if [[ $uefi == "true" ]]; then
	boot_part_name="/boot/efi"
else
	boot_part_name="/boot"
fi

#create boot partition
mkfs.vfat $boot_part
mkdir -p /mnt$boot_part_name
mount $boot_part /mnt$boot_part_name


}

prepsys()
{
mkdir -p /mnt/var/db/xbps/keys
cp /var/db/xbps/keys/* /mnt/var/db/xbps/keys/

if [[ $bm != "grub" && $uefi == "true" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt base-system binutils zstd cryptsetup lvm2 efibootmgr \
	sbsigntool systemd-boot-efistub sbctl refind dracut-uefi opendoas \
	runit-void-apparmor runit-nftables apparmor

	chroot /mnt xbps-alternatives -s dracut-uefi

elif [[ $bm = "grub" && $uefi == "true" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt base-system binutils zstd cryptsetup lvm2 efibootmgr \
	sbctl grub-btrfs grub-btrfs-runit btrfs-progs grub-x86_64-efi snapper opendoas \
	runit-void-apparmor runit-nftables apparmor

elif [[ $bm = "grub" && $uefi != "true" ]]; then

	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt base-system binutils zstd cryptsetup \
	lvm2 grub-btrfs grub-btrfs-runit btrfs-progs grub snapper opendoas \
	runit-void-apparmor runit-nftables apparmor
fi

#chroot

$crm chown root:root /
$crm chmod 755 /

useradd -R /mnt -m -U -G $user_groups $username -s /bin/bash

# if [[ $adm == 0 ]]; then

cat << EOF | $crm
echo "$root_pw\n$root_pw" | passwd -q root
echo "$user_pw\n$user_pw" | passwd -q $username
EOF
# else
# cat << EOF | $crm
# echo "$user_pw\n$user_pw" | passwd -q $username
# EOF
# fi

#Set hostname and language/locale
echo $hostname > /mnt/etc/hostname


if [[ $glib == "" ]]; then
    echo "LANG=$language" > /mnt/etc/locale.conf
	echo -e "$language UTF-8" >> /mnt/etc/default/libc-locales
    #xbps-reconfigure -fr /mnt/ glibc-locales
else
	echo "LANG=$language" > /mnt/etc/locale.conf
fi

$crm ln -sf $local /etc/localtime


luks_root_uuid=$(blkid -o value -s UUID  /mnt/dev/mapper/$hostname-root)
luks_home_uuid=$(blkid -o value -s UUID  /mnt/dev/mapper/$hostname-home)
boot_uuid=$(blkid -o value -s UUID  /mnt$disk'1')
luks_uuid=$(blkid -o value -s UUID  /mnt$disk'2')
ROOT_UUID=$(blkid -s UUID -o value $diskmap)

if [[ $fs_type != "btrfs"  ]]; then
	echo -e "UUID=$luks_root_uuid	/	$fs_type	defaults,noatime	0	1" >> /mnt/etc/fstab
fi

if [[ ! -z $root_part_size || $fs_type != "btrfs" ]]; then
	echo -e "UUID=$luks_home_uuid	/home	$fs_type	defaults,noatime	0	2" >> /mnt/etc/fstab

else
	echo -e "UUID=$ROOT_UUID / btrfs $BTRFS_OPTS,subvol=@ 0 1
	UUID=$ROOT_UUID /home btrfs $BTRFS_OPTS,subvol=@home 0 2
	UUID=$ROOT_UUID /var/log btrfs $BTRFS_OPTS,subvol=@log 0 2
	UUID=$ROOT_UUID /var/cache btrfs $BTRFS_OPTS,subvol=@cache 0 2
	UUID=$ROOT_UUID /.snapshots btrfs $BTRFS_OPTS,subvol=@snapshots 0 2 " >> /mnt/etc/fstab
fi

#echo "efivarfs /sys/firmware/efi/efivars efivarfs defaults 0 0" >> /mnt/etc/fstab


echo "UUID=$boot_uuid	$boot_part_name	vfat	umask=0077	0	1" >> /mnt/etc/fstab

#dracut
echo "hostonly=yes" > /mnt/etc/dracut.conf.d/10-boot.conf

if [[ $bm != "grub" && $uefi == "true" ]]; then
	echo -e 'uefi="yes"
	uefi_stub=/lib/systemd/boot/efi/linuxx64.efi.stub'  >> /mnt/etc/dracut.conf.d/10-boot.conf
fi
if [[ $bm != "grub" && $fs_type != "btrfs" && $uefi == "true"  ]]; then
	echo 'kernel_cmdline="rd.luks.name='$luks_root_uuid'=crypt_'"${luks_part/'/dev/'}"' rd.lvm.vg='$hostname' root=/dev/'$hostname'/root rd.luks.allow-discards apparmor=1 security=apparmor quiet"' >> /mnt/etc/dracut.conf.d/10-boot.conf
elif [[ $bm != "grub" && $fs_type == "btrfs" && $uefi == "true" ]]; then
	echo 'kernel_cmdline="root=UUID='$ROOT_UUID' apparmor=1 security=apparmor quiet"' >> /mnt/etc/dracut.conf.d/10-boot.conf
fi
}

hardening()
{
#disable root login
if [[ $adm ==  1 ]]; then
sed -i 's,^root:x:0:0:root:/root:/bin/sh,root:x:0:0:root:/root:/sbin/nologin,' /mnt/etc/passwd
fi

# harden sysctl

mkdir /mnt/etc/sysctl.d

echo -e "dev.tty.ldisc_autoload=0
fs.protected_symlinks=1
fs.protected_hardlinks=1
fs.protected_fifos=2
fs.protected_regular=2
fs.suid_dumpable=0
kernel.core_pattern=|/bin/false
kernel.dmesg_restrict=1
kernel.kexec_load_disabled=1
kernel.yama.ptrace_scope=2
kernel.kptr_restrict=2
kernel.printk=3 3 3 3
kernel.unprivileged_bpf_disabled=1
kernel.sysrq=4
kernel.perf_event_paranoid=3
kernel.randomize_va_space=2
kernel.msgmnb=65535
kernel.msgmax=65535
net.core.bpf_jit_harden=2
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_rfc1337=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0
net.ipv4.icmp_echo_ignore_all=1
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0
vm.mmap_rnd_bits=32
vm.mmap_rnd_compat_bits=16
vm.unprivileged_userfaultfd=0" > /mnt/etc/sysctl.d/99-void-user.conf

#doas
echo "permit persist setenv {PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin} :$username" > /mnt/etc/doas.conf

$crm << EOF
chown -c root:root /etc/doas.conf
chmod -c 0400 /etc/doas.conf
EOF

#ssh / cron hardening permissions
echo -e "PasswordAuthentication no
PermitRootLogin no" >> /mnt/etc/ssh/sshd_config

$crm << EOF
chown -c root:root /etc/ssh/sshd_config
chmod -c 0400 /etc/ssh/sshd_config
chown -c root:root /etc/cron.daily
chmod -c 0400 /etc/cron.daily
EOF

#blacklist modules and drivers not needed
echo -e "blacklist dccp
install dccp /bin/false
blacklist sctp
install sctp /bin/false
blacklist rds
install rds /bin/false
blacklist tipc
install tipc /bin/false
blacklist firewire-core
install firewire-core /bin/false
blacklist thunderbolt
install thunderbolt /bin/false" > /mnt/etc/modprobe.d/blacklist.conf

#apparmor
sed -i 's/^#*APPARMOR=.*$/APPARMOR=enforce/i' /mnt/etc/default/apparmor
sed -i 's/^#*write-cache/write-cache/i' /mnt/etc/apparmor/parser.conf

}

appsinstall()
{
XBPS_ARCH=$ARCH xbps-install -SuyR $void_repo -r /mnt xbps
XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt void-repo-nonfree

if [[ $graphical == "kde" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt $apps $apps_kde $apps_intel $apps_optional $fonts

elif [[ $graphical == "gnome" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt $apps $apps_gnome $apps_intel $apps_optional $fonts

elif [[ $graphical == "xfce" ]]; then
	XBPS_ARCH=$ARCH xbps-install -SyR $void_repo -r /mnt $apps $apps_xfce $apps_intel $apps_optional $fonts

elif [[ $graphical == "minimal" ]]; then
	XBPS_ARCH=$ARCH  xbps-install -SyR $void_repo -r /mnt $apps_minimal $fonts

	#iwd
	mkdir -p /mnt/etc/iwd

	echo -e "[General]
	EnableNetworkConfiguration=true
	[Network]
	RoutePriorityOffset=200
	NameResolvingService=none
	EnableIPv6=false" > /mnt/etc/iwd/main.conf

fi
}

firewall()
{
#firewall nftables example for a workstation

echo -e 'flush ruleset

table inet filter {
	chain input {
		type filter hook input priority 0; policy drop;
		ct state invalid counter drop comment "early drop of invalid packets"
		ct state {established, related} counter accept comment "accept all connections related to connections made by us"
		iif lo accept comment "accept loopback"
		iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not coming from loopback"
		iif != lo ip6 daddr ::1/128 counter drop comment "drop connections to loopback not coming from loopback"
		ip protocol icmp counter accept comment "accept all ICMP types"
		meta l4proto ipv6-icmp counter accept comment "accept all ICMP types"
		udp dport mdns ip daddr 224.0.0.251 counter accept comment "IPv4 mDNS"
		udp dport mdns ip6 daddr ff02::fb counter accept comment "IPv6 mDNS"
		#tcp dport 22 counter accept comment "accept SSH"
		counter comment "count dropped packets"
	}
	chain forward {
		type filter hook forward priority 0; policy drop;
		counter comment "count dropped packets"
	}
	# If were not counting packets, this chain can be omitted.
	chain output {
		type filter hook output priority 0; policy accept;
		counter comment "count accepted packets"
	}
}' > /mnt/etc/nftables.conf
}

configsys()
{
#set main repo

#echo "repository=$void_repo" > /mnt/usr/share/xbps.d/00-repository-main.conf

if [[ $graphical != "minimal" ]]; then

	#pipewire
	$crm mkdir -p /etc/pipewire/pipewire.conf.d
	$crm ln -s /usr/share/examples/wireplumber/10-wireplumber.conf /etc/pipewire/pipewire.conf.d/
	$crm ln -s /usr/share/examples/pipewire/20-pipewire-pulse.conf /etc/pipewire/pipewire.conf.d/

	#start pipewire.desktop for kde gnome etc
	$crm ln -s /usr/share/applications/pipewire.desktop /etc/xdg/autostart/pipewire.desktop

	#octoxbps-notifier
	$crm ln -s /usr/share/applications/octoxbps-notifier.desktop /etc/xdg/autostart/octoxbps-notifier.desktop
fi

#disable services
for serv1 in ${rm_services[@]}; do

	$crm touch /etc/sv/$serv1/down
done

#enable services
for serv2 in ${en_services[@]}; do

	$crm ln -s /etc/sv/$serv2 /var/service

done

#rc.conf
echo -e 'KEYMAP="'$keyb'"
FONT="ter-v22b"' >> /mnt/etc/rc.conf

#time zone
$crm ln -sf $local /etc/localtime

}

custom()
{
echo -e 'source /home/'$username'/.bash_aliases
ufetch
complete -cf "xi xs"
eval "$(starship init bash)"' >> /mnt/home/$username/.bashrc


mkdir -p /mnt/home/$username/.config
$crm chown -R $username:$username /home/$username/.config

echo -e "add_newline = true
[character] # The name of the module we are configuring is 'character'
success_symbol = '[➜](bold green)' # The 'success_symbol' segment is being set to '➜' with the color 'bold green'
[package]
disabled = true" > /mnt/home/$username/.config/starship.toml

echo -e "alias xi='doas xbps-install -S'
alias xu='doas xbps-install -Su'
alias xs='xbps-query -Rs'
alias xr='doas xbps-remove -oOR'
alias xq='xbps-query'
alias xsi='xbps-query -m'
alias sudo='doas'
alias dmesg='doas dmesg | less'
alias logs='doas svlogtail | less'
alias e='nano'
alias de='doas nano'
alias vsv='doas vsv'
alias reboot='doas reboot'
alias poweroff='doas poweroff'
alias ss='ss -atup'
alias cat='bat'
alias gitssh='ssh -T git@github.com'
alias ll='ls -all'
alias rollup='doas grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Void --disable-shim-lock --modules="tpm" && doas grub-mkconfig -o /boot/grub/grub.cfg && doas sbctl sign-all'
#snapper
alias xis='doas snapper create -d before-xbps-install && doas xbps-install -S'
alias xrs='doas snapper create -d before-xbps-remove && doas xbps-remove -oOR'
alias xus='doas snapper create --command "xbps-install -Su" -d xbps-update'
alias sensors='watch sensors'" > /mnt/home/$username/.bash_aliases

$crm chown $username:$username /home/$username/.bash_aliases

#fonts
$crm ln -s /usr/share/fontconfig/conf.avail/70-no-bitmaps.conf /etc/fonts/conf.d/
#xbps-reconfigure -fr fontconfig /mnt/

#ignore packages
$crm touch /etc/xbps.d/99-ignorepkgs.conf

ignore_pkgs=("sudo" "linux-firmware-amd" "linux-firmware-nvidia" "linux-firmware-broadcom" "ipw2100-firmware" "ipw2200-firmware")

for pkg in ${ignore_pkgs[@]}; do
   echo "ignorepkg="$pkg >> /mnt/etc/xbps.d/99-ignorepkgs.conf
   $crm xbps-remove -oOR $pkg -y
done

# enable flatpak

$crm flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo


#dns
#for dns in ${dns_list[@]}; do

  #echo "nameserver="$dns >> /mnt/etc/resolv.conf
}

bootmanag()
{
if [[ $bm != "grub" && $uefi == "true"  ]]; then
	echo -e "#!/bin/sh
	mv /boot/efi/EFI/Linux/linux-* /boot/efi/EFI/Linux/linuxOLD.efi" \
	> /mnt/etc/kernel.d/post-install/10-uefi-boot
	chmod +x /mnt/etc/kernel.d/post-install/10-uefi-boot

	echo -e "#!/bin/sh
	cp /boot/efi/EFI/Linux/linux-* /boot/efi/EFI/Linux/linux.efi" \
	> /mnt/etc/kernel.d/post-install/99-uefi-boot
	chmod +x /mnt/etc/kernel.d/post-install/99-uefi-boot


	echo -e 'CREATE_UEFI_BUNDLES=yes
	UEFI_BUNDLE_DIR="boot/efi/EFI/Linux/"' >> /mnt/etc/default/dracut-uefi-hook
	mkdir -p /mnt/boot/efi/EFI/Linux

	efibootmgr -c -d $disk -p 1 -L "Void Linux OLD" -l "\EFI\Linux\linuxOLD.efi"
	efibootmgr -c -d $disk -p 1 -L "Void Linux" -l "\EFI\Linux\linux.efi"
fi
if [[ $bm == "refind" && $uefi == "true" ]]; then
	$crm refind-install
fi
if [[ $bm == "grub" && $fs_type != "btrfs" ]]; then
	echo 'GRUB_CMDLINE_LINUX="rd.luks.uuid='$luks_uuid' rd.lvm.vg='$hostname' apparmor=1 security=apparmor"' >> /mnt/etc/default/grub
fi
if [[ $bm == "grub" && $fs_type == "btrfs" ]]; then
	echo 'GRUB_CMDLINE_LINUX="root=UUID='$ROOT_UUID' apparmor=1 security=apparmor"' >> /mnt/etc/default/grub
fi
if [[ $bm == "grub" && $fs_type == "btrfs" && $encryption == "yes" ]]; then
	echo 'GRUB_BTRFS_ENABLE_CRYPTODISK="true"' >> /mnt/etc/default/grub-btrfs/config
	echo "GRUB_ENABLE_CRYPTODISK=y" >> /mnt/etc/default/grub
	dd bs=1 count=64 if=/dev/urandom of=/mnt/boot/volume.key
	echo $luks_pw | cryptsetup luksAddKey $disk'2' /mnt/boot/volume.key
	$crm chmod 000 /boot/volume.key
	$crm chmod -R g-rwx,o-rwx /boot
	echo "crypt_"${luks_part/'/dev/'}" UUID=$luks_uuid /boot/volume.key luks" >> /mnt/etc/crypttab
	echo 'install_items+=" /boot/volume.key /etc/crypttab "' >> /mnt/etc/dracut.conf.d/10-boot.conf
fi

if [[ $bm == "grub" && $uefi != "true" ]]; then
	$crm grub-install $disk
	$crm grub-mkconfig -o /boot/grub/grub.cfg
fi
if [[ $bm == "grub" && $uefi == "true" ]]; then
	$crm grub-install --target=x86_64-efi --efi-directory=$boot_part_name --bootloader-id=Void --disable-shim-lock --modules="tpm"
	$crm grub-mkconfig -o /boot/grub/grub.cfg
fi
}

secboot()
{
#secure boot
if [[ $secure_boot == 0 && $uefi == "true" ]]; then

	$crm sbctl create-keys
	$crm sbctl enroll-keys -i -m
fi
if [[ $secure_boot == 0 && $bm != "grub" && $uefi == "true" ]]; then
	echo 'uefi_secureboot_cert="/var/lib/sbctl/keys/db/db.pem"' >> /mnt/etc/dracut.conf.d/10-boot.conf
	echo 'uefi_secureboot_key="/var/lib/sbctl/keys/db/db.key"' >> /mnt/etc/dracut.conf.d/10-boot.conf
fi
if [[ $bm == "grub" && $secure_boot == 0 && $uefi == "true" ]]; then
	$crm sbctl sign -s $boot_part_name/EFI/Void/grubx64.efi
	vmlinuz=$(ls /mnt/boot/vm*)
	vmlinuz="${vmlinuz/'/mnt'}"
	$crm sbctl sign -s $vmlinuz
fi
if [[ $bm == "refind" && $secure_boot == 0  && $uefi == "true" ]]; then
	$crm sbctl sign -s $boot_part_name/EFI/refind/refind_x64.efi
fi
}

finish()
{

xbps-reconfigure -far /mnt/

dialog --yesno "All done! reboot?" 0 0 --output-fd 1
end=$?
clear

if [[ $end == 1 ]]; then
	exit

else
	umount -R /mnt
 	reboot
	shutdown -r now
fi


}

main()
{
starting
prepdisk
prepsys
appsinstall
configsys
hardening
firewall
custom
bootmanag
secboot
finish
}

main

